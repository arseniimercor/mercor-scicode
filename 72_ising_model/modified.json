{
    "problem_name": "ising_model",
    "problem_id": "72",
    "problem_description_main": "Implement a 2D Ising classical model with periodic boundary conditions using the Metropolis-Hastings algorithm. The lattice has dimensions $(N, N)$ with spin interaction energy, $J = 1$, and no external magnetic field, $B = 0$. Write a Python script to simulate a 2D periodic Ising model to perform the simulation on a lattice over a range of temperatures to compute the transition/critical temperature at which a phase transition occurs from an ordered (magnetized) state to a disordered (non-magnetized) state.",
    "problem_io": "'''\nInput: \nTs (float): List of temperatures to simulate.\nN (int): Size of the lattice (N x N).\nnsweeps: Number of sweeps to perform at each temperature.\n\nOutput:\nTc (float): Estimated critical/transition temperature\n\n'''",
    "required_dependencies": "import numpy as np",
    "sub_steps": [
        {
            "step_number": "72.1",
            "step_name": "neighbor_list",
            "step_description_prompt": "Write a function to return the 4 nearest neighbors of a spin at site $(i, j)$ in a 2D lattice with periodic boundary conditions with lattice of dimension $(N, N)$.",
            "function_header": "def neighbor_list(site: tuple, N: int) -> list:\n    '''Return all nearest neighbors of site (i, j) in a periodic lattice.\n    Args:\n        site: A tuple (i, j) representing the site indices.\n        N (int): The size of the lattice along one dimension.\n        Returns: a list of tuples, [(i_left, j_left), (i_above, j_above), (i_right, j_right), (i_below, j_below)]\n    '''",
            "test_cases": [
                "# Test 1:\nN = 10\nresult = neighbor_list((0, 0), N)\nexpected =[(9, 0), (0, 1), (1, 0), (0, 9)]\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 2:\nN = 10\nresult = neighbor_list((9,9), N)\nexpected =[(8, 9), (9, 0), (0, 9), (9, 8)]\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 3:\nN = 10\nresult = neighbor_list((5,0), N)\nexpected =[(4, 0), (5, 1), (6, 0), (5, 9)]\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 4:\nN = 10\nresult = neighbor_list((5,5), N)\nexpected =[(4, 5), (5, 6), (6, 5), (5, 4)]\nassert result == expected, f\"Expected {expected}, but got {result}\""
            ],
            "return_line": "return neighbors",
            "step_background": "In a periodic 2D lattice,  each spin has four nearest neighbors: left, above, right, and below. The 4 nearest neighbors of each spin site $(i, j)$ are $(i - 1, j), (i, j + 1), (i + 1, j), (i, j - 1)$. The neighbors of a spin at $(i, j)$ wrap around to the other side when they exceed the boundaries.",
            "ground_truth_code": "def neighbor_list(site: tuple, N: int) -> list:\n    '''Return all nearest neighbors of a site (i, j) in a periodic lattice.\n        Args:\n             site: A tuple (i, j) representing the site indices.\n             N (int): The size of the lattice along one dimension.\n             Returns: a list of tuples, [(i_left, j_left), (i_above, j_above), (i_right, j_right), (i_below, j_below)'''\n    if not isinstance(site, tuple) or len(site) != 2:\n        raise ValueError('site must be a tuple with two elements')\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    i, j = site\n    neighbors = [\n        ((i - 1) % N, j),  # left\n        (i, (j + 1) % N),  # above\n        ((i + 1) % N, j),  # right\n        (i, (j - 1) % N)   # below\n    ]\n    return neighbors"
        },
        {
            "step_number": "72.2",
            "step_name": "energy_site",
            "step_description_prompt": "Write a function to calculate the energy contribution of a spin at site $(i, j)$ in the lattice.",
            "function_header": "def energy_site(i: int, j: int, lattice: np.ndarray, neighbors: list) -> float:\n    '''Calculate the energy contribution of a spin at site (i, j)\n    Args:\n        i (int): Row index of the spin.\n        j (int): Column index of the spin.\n        lattice (np.array): A 2D array representing lattice of shape (N, N).\n        neighbors (list): A list of neighbor indices at site (i, j).\n        Returns: The energy (float value) contribution of site (i, j).'''",
            "test_cases": [
                "# Test 1:\nlattice = np.array([[ 1, -1,  1,  1], [-1, -1,  1,  1], [-1, -1,  1,  1], [ 1, -1, -1, -1]])\ni, j = 1, 2\nneighbors = [(0, 2), (1, 3), (2, 2), (1, 1)]\nexpected = -1 * lattice[1,2]* (lattice[0,2] + lattice[1,3] + lattice[2,2] + lattice[1,1])\nresult = energy_site(i, j, lattice, neighbors)\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 2:\nlattice = np.array([[ 1, -1,  1,  1], [-1,  1,  1,  1], [-1, -1,  1,  1], [ 1, -1, -1, -1]])\ni, j = 1, 2\nneighbors = [(0, 2), (1, 3), (2, 2), (1, 1)]\nexpected = -1 * lattice[1,2]* (lattice[0,2] + lattice[1,3] + lattice[2,2] + lattice[1,1])\nresult = energy_site(i, j, lattice, neighbors)\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 3:\nlattice = np.array([[ 1, -1,  1,  1], [-1, -1,  1, -1], [-1, -1,  1,  1], [ 1, -1, -1, -1]])\ni, j = 1, 2\nneighbors = [(0, 2), (1, 3), (2, 2), (1, 1)]\nexpected = -1 * lattice[1,2]* (lattice[0,2] + lattice[1,3] + lattice[2,2] + lattice[1,1])\nresult = energy_site(i, j, lattice, neighbors)\nassert result == expected, f\"Expected {expected}, but got {result}\"",
                "# Test 4:\nlattice = np.array([[ 1, -1,  1,  1], [-1, -1,  1, 1], [-1, -1,  1,  1], [ 1, -1, -1, -1]])\ni, j = 0, 0\nneighbors = [(3, 0), (0, 1), (1, 0), (0, 3)]\nexpected = -1 * lattice[0,0]* (lattice[3,0] + lattice[0,1] + lattice[1,0] + lattice[0,3])\nresult = energy_site(i, j, lattice, neighbors)\nassert result == expected, f\"Expected {expected}, but got {result}\""
            ],
            "return_line": "return energy",
            "step_background": "The energy contribution of a spin on site $(i, j)$ is given by:\n\n $E_{ij} = -J \\sum_{\\langle i, j \\rangle} s_i s_j$\n\nwhere $s_k$ is the spin at site $(k)$, and the sum runs over its nearest neighbors ${\\langle i, j \\rangle}$.",
            "ground_truth_code": "def energy_site(i: int, j: int, lattice: np.ndarray, neighbors: list) -> float:\n    '''Calculate the energy contribution of a spin at site (i, j)\n    Args:\n        i (int): Row index of the spin.\n        j (int): Column index of the spin.\n        lattice (np.array): A 2D array representing lattice of shape (N, N).\n        neighbors (list): A list of neighbor indices at site (i, j).\n        Returns: The energy (float value) contribution of site (i, j)'''\n    spin = lattice[i, j]\n    # Exclude self-interaction from the neighbors list\n    valid_neighbors = [(ni, nj) for ni, nj in neighbors if (ni, nj) != (i, j)]\n    energy = -spin * sum(lattice[ni, nj] for ni, nj in valid_neighbors)\n    return energy"
        },
        {
            "step_number": "72.3",
            "step_name": "total_energy",
            "step_description_prompt": "Write a function to calculate the total energy (also called Hamiltonian) of the 2D lattice with dimension $(N, N)$.",
            "function_header": "def total_energy(lattice: np.ndarray) -> float:    \n    '''Calculate the total energy of the lattice.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    Returns: The total energy (float value) of the lattice.'''",
            "test_cases": [
                "# Test 1:\nlattice = np.array([[1, 1, 1, -1], [-1, 1, -1, -1], [-1, -1, 1, 1], [-1, 1, 1, 1]])\nresult_E = total_energy(lattice)\nexpected_E = 0  # Example value (needs calculation)\nassert result_E == expected_E, f\"Expected {expected_E}, but got {result_E}\"",
                "# Test 2:\nlattice = np.array([[1, 1], [1, 1]])\nresult_E = total_energy(lattice)\nexpected_E = -4  # Each bond counts once\nassert result_E == expected_E, f\"Expected {expected_E}, but got {result_E}\"",
                "# Test 3:\nlattice = np.array([[-1, -1], [-1, -1]])\nresult_E = total_energy(lattice)\nexpected_E = -4 \nassert result_E == expected_E, f\"Expected {expected_E}, but got {result_E}\""
            ],
            "return_line": "return total_energy",
            "step_background": "The total energy, which is also represented as Hamiltonian is calculated by summing the energy contributions of all unique pairs of nearest neighbors to avoid double counting. This can be achieved by summing over each site and considering only the right and below neighbors.\n\nThe Hamiltonian is given by:\n\n$H = -J \\sum_{\\langle i, j \\rangle} s_i s_j - B \\sum_{k} s_k$\n\n$H= - \\sum_{\\langle i,j \\rangle} s_i s_j$ # For $J=1$ and $B=0$\n\nwhere $\\langle i, j \\rangle$ iterates over unique pairs of nearest neighbors.",
            "ground_truth_code": "def total_energy(lattice: np.ndarray) -> float:    \n    '''Calculate the total energy of the lattice.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    Returns: The total energy (float value) of the lattice.'''\n    N = lattice.shape[0]\n    total_energy = 0\n    for i in range(N):\n        for j in range(N):\n            spin = lattice[i, j]            \n            neighbors = [((i + 1) % N, j), (i, (j + 1) % N)]  # Only right and below neighbors\n            total_energy += -spin * sum(lattice[ni, nj] for ni, nj in neighbors)\n    return total_energy / 2"
        },
        {
            "step_number": "72.4",
            "step_name": "magnetization",
            "step_description_prompt": "Write a function to calculate the total magnetization of the 2D lattice.",
            "function_header": "def magnetization(lattice):\n    ''' Calculate the total magnetization of the 2D lattice.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    Returns: The total magnetization of the lattice.    '''",
            "test_cases": [
                "# Test 1:\nlattice = np.array([[1, 1, 1, -1], [-1, 1, -1, -1], [-1, -1, 1, 1], [-1, 1, 1, 1]])\nresult_mag = magnetization(lattice)\nexpected_mag = 2\nassert result_mag == expected_mag, f\"Expected {expected_mag}, but got {result_mag}\"",
                "# Test 2:\nlattice = np.array([[1, 1, 1, -1], [-1, -1, -1, -1], [-1, -1, 1, 1], [-1, 1, 1, 1]])\nresult_mag = magnetization(lattice)\nexpected_mag = 0\nassert result_mag == expected_mag, f\"Expected {expected_mag}, but got {result_mag}\"",
                "# Test 3:\nlattice = np.array([[1, 1, 1, -1], [-1, 1, -1, 1], [-1, -1, 1, 1], [-1, 1, 1, 1]])\nresult_mag = magnetization(lattice)\nexpected_mag = 4\nassert result_mag == expected_mag, f\"Expected {expected_mag}, but got {result_mag}\""
            ],
            "return_line": "return magnetization",
            "step_background": "The magnetization is defined as the sum of all spins in the lattice:\n$M = \\sum_{i} s_i$",
            "ground_truth_code": "def magnetization(lattice: np.ndarray) -> int:  \r\n    ''' Calculate the total magnetization of the 2D lattice.\r\n    Args:\r\n    lattice: A 2D NumPy array representing the spin lattice.\r\n    Returns: The total magnetization of the lattice.    '''\r\n    mag = np.sum(lattice)  \r\n    return mag"
        },
        {
            "step_number": "72.5",
            "step_name": "get_flip_probability_magnetization",
            "step_description_prompt": "Write a function to calculate the acceptance probability and the change in magnetization due to a spin flip at site $(i, j)$ given the inverse temperature $\\beta$.",
            "function_header": "def get_flip_probability_magnetization(lattice: np.ndarray, i: int, j: int, beta: float, neighbors: list) -> tuple:\n    '''Calculate the spin flip acceptance probability and change in magnetization.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    i: Row index of the spin to flip.\n    j: Column index of the spin to flip.\n    beta (float): Inverse temperature (1/T).\n    neighbors: List of tuples representing the neighboring coordinates of site (i, j).\n    Returns: A tuple containing:\n             - A: The acceptance probability of the spin flip.\n             - dM: The change in magnetization due to the flip.'''",
            "test_cases": [
                "#Test 1:\nlattice = np.array([[ 1, -1,  1,  1], [-1, -1,  1,  1], [-1, -1,  1,  1], [ 1, -1, -1, -1]])\ni, j = 1, 2\nbeta = 1.0\nneighbors = [(0, 2), (1, 3), (2, 2), (1, 1)]\nA, dM = get_flip_probability_magnetization(lattice, i, j, beta, neighbors)\nexpected_A = min(1, np.exp(-beta * (-2 * (-lattice[1, 2] * lattice[0, 2] - lattice[1, 2] * lattice[1, 3] - lattice[1, 2] * lattice[2, 2] - lattice[1, 2] * lattice[1, 1]))))\nexpected_dM = -2 * lattice[i, j]\nassert np.isclose(A, expected_A, atol=1e-4), f\"Expected {expected_A}, but got {A}\"\nassert dM == expected_dM, f\"Expected {expected_dM}, but got {dM}\"",
                "#Test 2:\nlattice = np.array([[ 1, -1], [-1,  1]])\ni, j = 0, 0\nbeta = 0.5\nneighbors = [(0, 1), (1, 0)]\nA, dM = get_flip_probability_magnetization(lattice, i, j, beta, neighbors)\nexpected_A = min(1, np.exp(-beta * (-2 * (-lattice[0, 0] * lattice[0, 1] - lattice[0, 0] * lattice[1, 0]))))\nexpected_dM = -2 * lattice[i, j]\nassert np.isclose(A, expected_A, atol=1e-4), f\"Expected {expected_A}, but got {A}\"\nassert dM == expected_dM, f\"Expected {expected_dM}, but got {dM}\"",
                "#Test 3:\nlattice = np.array([[ 1, -1, 1], [-1, 1, -1], [1, -1, 1]])\ni, j = 1, 1\nbeta = 1.0\nneighbors = [(0, 1), (1, 0), (1, 2), (2, 1)]  # Neighbors of (1, 1)\nA, dM = get_flip_probability_magnetization(lattice, i, j, beta, neighbors)\nexpected_A = min(1, np.exp(-beta * (-2 * (-lattice[1, 1] * lattice[0, 1] - lattice[1, 1] * lattice[1, 0] - lattice[1, 1] * lattice[1, 2] - lattice[1, 1] * lattice[2, 1]))))\nexpected_dM = -2 * lattice[i, j]\nassert np.isclose(A, expected_A, atol=1e-4), f\"Expected {expected_A}, but got {A}\"\nassert dM == expected_dM, f\"Expected {expected_dM}, but got {dM}\""
            ],
            "return_line": "return A, dM",
            "step_background": "The acceptance probability $A$ for flipping a spin is given by:\n\n$A = \\min\\left(1, e^{-\\beta \\Delta E}\\right)$\n\nwhere\n\n $\\Delta E = E_{\\text{new}} - E_{\\text{old}} = -2 \\times E_{ij}$, indicates that flipping a spin affects the interaction energy between the spin and its neighbors. $\\Delta E$ is the change in energy resulting from the spin flip. The energy change comes from the difference between the new energy configuration $E_{\\text{new}}$ after the flip and the old energy configuration $E_{\\text{old}}$.\n\nThe change in magnetization $\\Delta M$ is simply $ -2 s_{ij}$.\n\nAt temperature $T$, the partition function $Z$ is given by:\n\n$Z = \\sum_c e^{-\\beta H(c)}$\n\nwhere $\\beta = 1/T$, which is the inverse of the temperature, which determines the likelihood of configurations with different energy levels and $H(c)$ is the energy for a spin configuration $c$.\n\nThe probability distribution is given by:\n\n$P = e^{-\\beta H(c)}/Z$\n\nWe move the configuration $c$ to $c^{\\prime}$ with some probability $P( c \\rightarrow c^{\\prime})$. In this case, we flip a random spin, so:\n\n $P( c \\rightarrow c^{\\prime}) = P( c^{\\prime} \\rightarrow c) = 1/N$\n\n Thus, we accept the move with the probability:\n\n$A(c \\rightarrow c^{\\prime}) = \\min \\left[ 1, \\frac{\\Pi(c^{\\prime})}{\\Pi(c)} \\frac{T(c^{\\prime} \\rightarrow c)}{T(c \\rightarrow c^{\\prime})} \\right]$\n\nwhich simplifies to:\n\n$A(c \\rightarrow c^{\\prime}) = \\min[1, e^{-\\beta (H(c^{\\prime}) - H(c))}]$",
            "ground_truth_code": "def get_flip_probability_magnetization(lattice: np.ndarray, i: int, j: int, beta: float, neighbors: list) -> tuple:\n    '''Calculate the spin flip acceptance probability and change in magnetization.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    i: Row index of the spin to flip.\n    j: Column index of the spin to flip.\n    beta (float): Inverse temperature (1/T).\n    neighbors: List of tuples representing the neighboring coordinates of site (i, j).\n    Returns: A tuple containing:\n             - A: The acceptance probability of the spin flip.\n             - dM: The change in magnetization due to the flip.'''\n    spin = lattice[i, j]\n    current_energy = 0\n    for ni,nj in neighbors:\n        current_energy += -spin*lattice[ni, nj]\n    flipped_lattice = lattice.copy()\n    flipped_lattice[i, j] *= -1\n    new_energy = 0\n    for ni,nj in neighbors:\n        new_energy += -flipped_lattice[i, j] * flipped_lattice[ni, nj]\n    delta_E = new_energy - current_energy\n    A = min(1, np.exp(-beta * delta_E))\n    dM = -2 * spin\n    return A, dM"
        },
        {
            "step_number": "72.6",
            "step_name": "metropolis_sweep",
            "step_description_prompt": "Write a function to perform one Metropolis sweep over the lattice.",
            "function_header": "def metropolis_sweep(lattice: np.ndarray, beta: float) -> np.ndarray:\n    '''Perform one sweep of the Metropolis-Hastings algorithm over the lattice.\n Goes through each spin in the 2D lattice and flip it.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    beta (float): Inverse temperature (1/T).\n    Returns: The updated lattice (final spin configuration) after the sweep.'''",
            "test_cases": [
                "# Test 1:\nnp.random.seed(0)\nlattice = np.array([[1, -1], [-1, 1]])\nlattice_new = metropolis_sweep(lattice.copy(), beta=1.0) # Since this is stochastic, we can check if the lattice has valid spin values\nassert np.allclose(lattice_new, [[-1,  1], [ 1,  1]]), f\"Expected {[[-1,  1], [ 1,  1]]}, but got {lattice_new}\"",
                "# Test 2:\nnp.random.seed(1)\nlattice = np.array([[1, 1], [1, 1]])\nlattice_new = metropolis_sweep(lattice.copy(), beta=1.0)\nassert np.allclose(lattice_new, [[ 1,  1],[-1, -1]]), f\"Expected {[[ 1,  1], [-1, -1]]}, but got {lattice_new}\"",
                "# Test 3:\nnp.random.seed(2)\nlattice = np.array([[-1, -1], [-1, -1]])\nlattice_new = metropolis_sweep(lattice.copy(), beta=1.0)\nassert np.allclose(lattice_new, [[-1, -1],[-1,-1]]), f\"Expected {[[-1, -1], [-1,-1]]}, but got {lattice_new}\""
            ],
            "return_line": "return lattice",
            "step_background": "Perform one sweep of the Metropolis-Hastings algorithm over the lattice. In one sweep, each spin in the lattice is visited, and a spin flip is attempted according to the Metropolis-Hastings acceptance probability.",
            "ground_truth_code": "def metropolis_sweep(lattice: np.ndarray, beta: float) -> np.ndarray:\n    '''Perform one sweep of the Metropolis-Hastings algorithm over the lattice.\n Goes through each spin in the 2D lattice and flips it.\n    Args:\n    lattice: A 2D NumPy array representing the spin lattice.\n    beta (float): Inverse temperature (1/T).\n    Returns:The updated lattice (final spin configuration) after the sweep.'''\n    N = lattice.shape[0]\n    for i in range(N):\n        for j in range(N):\n            spin = lattice[i, j]\n            neighbors = []\n            if i > 0: neighbors.append((i-1, j))  # Up\n            if i < N-1: neighbors.append((i+1, j))  # Down\n            if j > 0: neighbors.append((i, j-1))  # Left\n            if j < N-1: neighbors.append((i, j+1))  # Right\n            current_energy = sum(-spin * lattice[ni, nj] for ni, nj in neighbors)\n            flipped_lattice = lattice.copy()\n            flipped_lattice[i, j] = -spin\n            flipped_energy = sum(-flipped_lattice[i, j] * flipped_lattice[ni, nj] for ni, nj in neighbors)\n            delta_E = flipped_energy - current_energy\n            A = min(1, np.exp(-beta * delta_E))\n            if np.random.rand() < A:\n                lattice[i, j] = flipped_lattice[i, j]\n    return lattice"
        },
        {
            "step_number": "72.7",
            "step_name": "run_simulation",
            "step_description_prompt": "Write a function  to run the 2D Ising model simulation for a given temperature.",
            "function_header": "def run_simulation(T: float, N: int, nsweeps: int) -> np.ndarray:\n    '''Run the Ising model simulation at temperature T.\n    Args:\n    T (float): Temperature of the simulation.\n    N: Size of the lattice (N x N).\n    nsweeps: Number of sweeps to perform.\n    Returns mag2: magnetization^2, An array of magnetization squared values collected during the simulation.'''",
            "test_cases": [
                "# Test 1:\nnp.random.seed(0)\nmag2 = run_simulation(T=1.6, N=3, nsweeps=10)\nassert len(mag2) == 10, f\"Expected length of mag2 is {10}, but got {len(mag2)}\"",
                "# Test 2:\nnp.random.seed(0)\nmag2 = run_simulation(T=2.1, N=3, nsweeps=10)\nassert len(mag2) == 10, f\"Expected length of mag2 is {10}, but got {len(mag2)}\"",
                "# Test 3:\nnp.random.seed(0)\nmag2 = run_simulation(T=2.15, N=3, nsweeps=10)\nassert len(mag2) == 10, f\"Expected length of mag2 is {10}, but got {len(mag2)}\""
            ],
            "return_line": "return mag2",
            "step_background": "The simulation involves performing multiple sweeps over the lattice of size `N` and collecting magnetization squared values to analyze the system's behavior at different temperatures.",
            "ground_truth_code": "def run_simulation(T: float, N: int, nsweeps: int) -> np.ndarray:\n    '''Run the Ising model simulation at temperature T.\n    Args:\n    T (float): Temperature of the simulation.\n    N: Size of the lattice (N x N).\n    nsweeps: Number of sweeps to perform.\n    Returns mag2: magnetization^2, An array of magnetization squared values collected during the simulation.'''\n    beta = 1.0 / T\n    lattice = np.random.choice([-1, 1], size=(N, N))\n    mag2 = []\n    for _ in range(nsweeps):\n        for i in range(N):\n            for j in range(N):\n                spin = lattice[i, j]\n                neighbors = [lattice[(i-1) % N, j], lattice[(i+1) % N, j], lattice[i, (j-1) % N], lattice[i, (j+1) % N]]\n                delta_E = -2 * spin * sum(neighbors)\n                A = min(1, np.exp(-beta * delta_E))\n                if np.random.rand() < A:\n                    lattice[i, j] *= -1\n        mag = np.sum(lattice)\n        mag2.append(mag ** 2 / (N**4))\n    return np.array(mag2)"
        },
        {
            "step_number": "72.8",
            "step_name": "scan_temperatures",
            "step_description_prompt": "Write a function to run simulations over a range of temperatures.",
            "function_header": "def scan_temperatures(Ts: list, N: int, nsweeps: int) -> list:\n    '''Run simulations over a range of temperatures.\n    Args:\n    Ts: List of temperatures to simulate.\n    N: Size of the lattice (N x N).\n    nsweeps: Number of sweeps to perform at each temperature.\n    Returns: A list of average magnetization squared values for each temperature.'''",
            "test_cases": [
                "# Test 1:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2_avg = scan_temperatures(Ts, N=10, nsweeps=5)\nassert len(mag2_avg) == len(Ts), f\"Expected length of mag2_avg is {len(Ts)}, but got {len(mag2_avg)}\"",
                "# Test 2:\nnp.random.seed(0)\nTs = [2.0, 2.2, 2.4]\nmag2_avg = scan_temperatures(Ts, N=20, nsweeps=10)\nassert len(mag2_avg) == len(Ts), f\"Expected length of mag2_avg is {len(Ts)}, but got {len(mag2_avg)}\"",
                "# Test 3:\nnp.random.seed(0)\nTs = [2.1, 2.3, 2.5]\nmag2_avg = scan_temperatures(Ts, N=30, nsweeps=10)\nassert len(mag2_avg) == len(Ts),  f\"Expected length of mag2_avg is {len(Ts)}, but got {len(mag2_avg)}\""
            ],
            "return_line": "return mag2_avg",
            "step_background": "By simulating the system of size $N$ at various temperatures, we could observe how the magnetization changes and estimate the critical temperature.",
            "ground_truth_code": "def scan_temperatures(Ts: list, N: int, nsweeps: int) -> list:\n    '''Run simulations over a range of temperatures.\n    Args:\n    Ts: List of temperatures to simulate.\n    N: Size of the lattice (N x N).\n    nsweeps: Number of sweeps to perform at each temperature.\n    Returns: A list of average magnetization squared values for each temperature.'''\n    mag2_avg = []\n    for T in Ts:\n        beta = 1.0 / T\n        lattice = np.random.choice([-1, 1], size=(N, N))\n        mag2 = []\n        for _ in range(nsweeps):\n            for i in range(N):\n                for j in range(N):\n                    spin = lattice[i, j]\n                    neighbors = [lattice[(i-1) % N, j], lattice[(i+1) % N, j], lattice[i, (j-1) % N], lattice[i, (j+1) % N]]\n                    delta_E = -2 * spin * sum(neighbors)\n                    A = min(1, np.exp(-beta * delta_E))\n                    if np.random.rand() < A:\n                        lattice[i, j] *= -1\n            mag = np.sum(lattice)\n            mag2.append(mag ** 2 / (N**4))\n        mag2_avg.append(np.mean(mag2))\n    return mag2_avg"
        },
        {
            "step_number": "72.9",
            "step_name": "calc_transition_temperature",
            "step_description_prompt": "Write a function to calculate the critical temperature from magnetization data.",
            "function_header": "def calc_transition_temperature(T_list: list, mag2_list: list) -> float:\n    '''Calculate the critical temperature from magnetization data.\n    Args:\n    T_list: List of temperatures.\n    mag2_list: List of average magnetization squared values corresponding to T_list.\n    Returns: The estimated critical temperature.'''",
            "test_cases": [
                "# Test 1:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2 = [0.01, 0.05, 0.10, 0.15, 0.20, 0.22, 0.18, 0.12, 0.05]\nT_transition = calc_transition_temperature(Ts, mag2)\nassert np.allclose(T_transition, 2.3, atol=0.1),  f\"Expected T_transition is {2.3}, but got {T_transition}\"",
                "# Test 2:\nnp.random.seed(0)\nTs = [1.0, 2.0, 3.0]\nmag2 = [0.02, 0.10, 0.12]\nT_transition = calc_transition_temperature(Ts, mag2)\nassert np.allclose(T_transition, 3.0, atol=0.1), f\"Expected T_transition is {3.0}, but got {T_transition}\"",
                "# Test 3:\nnp.random.seed(0)\nTs = [2.0, 2.2, 2.269, 2.4, 2.6]\nmag2 =  [0.05, 0.10, 0.25, 0.20, 0.15]\nT_transition = calc_transition_temperature(Ts, mag2)\nassert np.allclose(T_transition, 2.4, atol=0.1),  f\"Expected T_transition is {2.4}, but got {T_transition}\""
            ],
            "return_line": "return T_transition",
            "step_background": "The critical temperature is defined as the transition temperature in the simulation by analyzing the changes in magnetization squared across different temperatures. It calculates the derivative of magnetization squared with respect to temperature and finds the temperature at which this derivative is minimized (i.e., the magnetization changes most rapidly), indicating a phase transition.",
            "ground_truth_code": "def calc_transition_temperature(T_list: list, mag2_list: list) -> float:\n    '''Calculate the critical temperature from magnetization data.\n    Args:\n    T_list: List of temperatures.\n    mag2_list: List of average magnetization squared values corresponding to T_list.\n    Returns: The estimated critical temperature.'''\n    dmag2 = np.gradient(mag2_list, T_list)\n    T_transition = T_list[np.argmin(dmag2)]\n    return T_transition"
        }
    ],
    "general_solution": "import numpy as np\ndef neighbor_list(site: tuple, N: int) -> list:\n    if not isinstance(site, tuple) or len(site) != 2:\n        raise ValueError('site must be a tuple with two elements')\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    i, j = site\n    neighbors = [\n        ((i - 1) % N, j),  # left\n        (i, (j + 1) % N),  # above\n        ((i + 1) % N, j),  # right\n        (i, (j - 1) % N)   # below\n    ]\n    return neighbors\ndef energy_site(i: int, j: int, lattice: np.ndarray, neighbors: list) -> float:\n    N = lattice.shape[0]\n    spin = lattice[i, j]\n    # Exclude self-interaction from the neighbors list\n    valid_neighbors = [(ni, nj) for ni, nj in neighbors if (ni, nj) != (i, j)]\n    energy = -spin * sum(lattice[ni, nj] for ni, nj in valid_neighbors)\n    return energy\ndef total_energy(lattice: np.ndarray) -> float:\n    N = lattice.shape[0]\n    total_energy = 0\n    for i in range(N):\n        for j in range(N):\n            spin = lattice[i, j]\n            neighbors = [((i + 1) % N, j), (i, (j + 1) % N)]  # Avoid double counting\n            total_energy += -spin * sum(lattice[ni, nj] for ni, nj in neighbors)\n    return total_energy / 2\ndef magnetization(lattice: np.ndarray) -> int:\n    mag = np.sum(lattice)\n    return mag\ndef get_flip_probability_magnetization(lattice: np.ndarray, i: int, j: int, beta: float, neighbors: list) -> tuple:\n    current_energy = energy_site(i, j, lattice, neighbors)\n    flipped_lattice = lattice.copy()\n    flipped_lattice[i, j] *= -1\n    new_energy = energy_site(i, j, flipped_lattice)\n    dE = new_energy - current_energy\n    A = min(1, np.exp(-beta * dE))\n    dM = -2 * lattice[i, j]  # Magnetization change is ±2\n    return A, dM\ndef metropolis_sweep(lattice: np.ndarray, beta: float) -> np.ndarray:\n    N = lattice.shape[0]\n    for i in range(N):\n        for j in range(N):\n            A, _ = get_flip_probability_magnetization(lattice, i, j, beta)\n            if np.random.rand() < A:\n                lattice[i, j] *= -1\n    return lattice\ndef run_simulation(T: float, N: int, nsweeps: int) -> np.ndarray:\n    beta = 1.0 / T\n    lattice = np.random.choice([-1, 1], size=(N, N))\n    mag2 = []\n    for _ in range(nsweeps):\n        lattice = metropolis_sweep(lattice, beta)\n        mag = magnetization(lattice)\n        mag2.append(mag**2 / (N**4))\n    return np.array(mag2)\ndef scan_temperatures(Ts: list, N: int, nsweeps: int) -> list:\n    mag2_avg = []\n    for T in Ts:\n        mag2 = run_simulation(T, N, nsweeps)\n        mag2_avg.append(np.mean(mag2))\n    return mag2_avg\ndef calc_transition_temperature(T_list: list, mag2_list: list) -> float:\n    dmag2 = np.gradient(mag2_list, T_list)\n    T_transition = T_list[np.argmin(dmag2)]\n    return T_transition",
    "general_tests": [
        "# Test 1:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2 = scan_temperatures(Ts, N=5, nsweeps=100)\nT_transition = calc_transition_temperature(Ts, mag2)\nassert 2.0 < T_transition < 2.6",
        "# Test 2:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2 = scan_temperatures(Ts, N=10, nsweeps=100)\nT_transition = calc_transition_temperature(Ts, mag2)\nassert 2.0 < T_transition < 2.6",
        "# Test 3:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2 = scan_temperatures(Ts, N=20, nsweeps=100)\nT_transition = calc_transition_temperature(Ts, mag2)\nassert 2.0 < T_transition < 2.6",
        "# Test 4:\nnp.random.seed(0)\nTs = [1.6, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.8]\nmag2 = scan_temperatures(Ts, N=30, nsweeps=2000)\nT_transition = calc_transition_temperature(Ts, mag2)\nassert (np.abs(T_transition - 2.269) < 0.2)"
    ],
    "problem_background_main": "The Ising model is a mathematical model used in statistical mechanics to understand phase transitions in ferromagnetic materials. The 2D Ising model is a classical model, and does not involve quantum mechanical effects. It consists of discrete variables called spins ($s_i$) that can take on values of $+1$ or $-1$. These spins are arranged on a lattice of size $(N, N)$, and each spin interacts with its nearest neighbors. The 2D Ising model is defined by a lattice of spins (+1 or -1) with interaction energy function represented by Hamiltonian is given by:\n\n$H = -J \\sum_{\\langle i, j \\rangle} s_i s_j - B\\sum_{\\langle k \\rangle} s_k$\n\nwhere $J$ is the coupling constant (here $J = 1$), $\\langle i, j \\rangle$ are nearest neighbors, and $s_k$ is the spin at site $k$. Here, we assume that all of the nearest neighbors have the same interaction strength. \n\nPeriodic boundary conditions are applied to eliminate edge effects, meaning that spins at the edges of the lattice interact with spins on the opposite edge. \n\nThe critical temperature ($T_c$) is the temperature at which the system undergoes a phase transition from an ordered state to a disordered state, and can be estimated by examining changes in the magnetization squared ($M^2$) as a function of temperature.\n\nThe Metropolis-Hastings algorithm is used to simulate the dynamics of the system at a given temperature $T$, and follows the following steps:\n1. Propose flipping a spin.\n2. Calculate the change in energy $\\Delta E$ due to the flip.\n3. Accept the flip with probability $A = \\min(1, e^{-\\beta \\Delta E})$, where $\\beta = 1/T$.\n\nThe system is evolved for a specified number of sweeps, with measurements taken to calculate $M^2$.\n\n The goal is to implement functions to calculate energies, magnetization, and spin flips.\nUse the Metropolis-Hastings algorithm to simulate the Ising model at various temperatures.\n Determine the critical temperature by analyzing the magnetization as a function of temperature."
}
