{
    "problem_id": "19",
    "problem_name": "n_tangle",
    "problem_description_main": "Compute the n-tangle of an n-qubit pure state for even n.\n\nGiven an n-qubit pure state \\(|\\psi\\rangle\\) represented as a complex vector of length \\(2^n\\), write a function that computes the n-tangle \\(\\tau_n\\) of the state for even \\(n\\). The n-tangle is a measure of multi-qubit entanglement.",
    "problem_background_main": "The n-tangle of an n-qubit pure state \\(|\\psi\\rangle\\) is defined for even \\(n\\) as:\n\n\\[\n\\tau_n = |\\langle \\psi | \\sigma_y^{\\otimes n} | \\psi^* \\rangle|^2\n\\]\n\nwhere \\(\\sigma_y\\) is the Pauli Y matrix:\n\n\\[\n\\sigma_y = \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}\n\\]\n\nand \\(\\sigma_y^{\\otimes n}\\) denotes the tensor product of \\(\\sigma_y\\) with itself \\(n\\) times. The state \\(|\\psi^*\\rangle\\) is the complex conjugate of \\(|\\psi\\rangle\\). The n-tangle is a scalar value between 0 and 1, where 0 indicates no entanglement and 1 indicates maximal entanglement.",
    "problem_io": "'''\nInput:\npsi: A 1D numpy array of complex numbers representing the state vector |\u03c8\u27e9.\nThe length of the array should be 2^n, where n is an even integer.\n\nOutput:\nA float representing the n-tangle of the state.\n'''",
    "required_dependencies": "import numpy as np",
    "sub_steps": [
        {
            "step_number": "19.1",
            "step_name": "sigma_y_tensor_power",
            "step_description_prompt": "Write a function that computes the tensor (Kronecker) product of n Pauli Y matrices.",
            "step_background": "The tensor product (also known as Kronecker product) of two matrices A and B is a matrix formed by multiplying each element of A by the entire matrix B. The tensor product is used extensively in quantum mechanics to describe the combined state of multiple systems.",
            "ground_truth_code": "def sigma_y_tensor_power(n) -> np.ndarray:\n    '''Compute the tensor product of n Pauli Y matrices.\n\n    Input:\n    n: Number of matrices.\n\n    Output:\n    A numpy array representing the tensor product of the input arrays.\n    '''\n    sigma_y = np.array([[0,-1j],[1j,0]])\n    product = sigma_y\n    for i in range(n-1):\n        product = np.kron(product, sigma_y)\n    return product",
            "function_header": "def sigma_y_tensor_power() -> np.ndarray:\n    '''\n    Compute the tensor product of n Pauli Y matrices.\n\n    Input:\n    n: Number of matrices.\n\n    Output:\n    A numpy array representing the tensor product of the input arrays.\n    '''",
            "test_cases": [
                "# Test 1: Tensor product of 2 Pauli Y matrices",
                "assert np.allclose(sigma_y_tensor_power(2), target, rtol=1e-4, atol=1e-4)",
                "# Test 2: Tensor product of 3 Pauli Y matrices",
                "assert np.allclose(sigma_y_tensor_power(3), target, rtol=1e-4, atol=1e-4)",
                "# Test 3: Tensor product of 4 Pauli Y matrices",
                "assert np.allclose(sigma_y_tensor_power(4), target, rtol=1e-4, atol=1e-4)"
            ],
            "return_line": ""
        },
        {
            "step_number": "19.2",
            "step_name": "n_tangle",
            "step_description_prompt": "Write a function that computes the n-tangle of an n-qubit pure state for even n.",
            "step_background": "The n-tangle of an n-qubit pure state \\(|\\psi\\rangle\\) is defined for even \\(n\\) as:\n\n\\[\n\\tau_n = |\\langle \\psi | \\sigma_y^{\\otimes n} | \\psi^* \\rangle|^2\n\\]\n\nwhere \\(\\sigma_y\\) is the Pauli Y matrix and \\(\\sigma_y^{\\otimes n}\\) denotes the tensor product of \\(\\sigma_y\\) with itself \\(n\\) times. The state \\(|\\psi^*\\rangle\\) is the complex conjugate of \\(|\\psi\\rangle\\).",
            "ground_truth_code": "def n_tangle(psi):\n    '''Compute the n-tangle of an n-qubit pure state for even n.\n\n    Input:\n    psi: A 1D numpy array of complex numbers representing the state vector |\u03c8\u27e9.\n    The length of the array should be 2^n, where n is an even integer.\n\n    Output:\n    A float representing the n-tangle of the state.\n   '''\n    n = int(np.log2(len(psi)))\n    product = sigma_y_tensor_power(n)\n    psi_star = product @ np.conj(psi)\n    tangle = (abs(np.inner(psi,psi_star)))**2\n    return tangle",
            "function_header": "def n_tangle():\n    '''Compute the n-tangle of an n-qubit pure state for even n.\n\n    Input:\n    psi: A 1D numpy array of complex numbers representing the state vector |\u03c8\u27e9.\n    The length of the array should be 2^n, where n is an even integer.\n\n    Output:\n    A float representing the n-tangle of the state.\n    '''",
            "test_cases": [
                "# Test 1: 2-qubit maximally entangled Bell state |\u03a6+\u27e9 = (|00\u27e9 + |11\u27e9)/\u221a2",
                "psi = np.array([1, 0, 0, 1]) / np.sqrt(2)",
                "target = 1.0",
                "assert np.isclose(n_tangle(psi), target, rtol=1e-4, atol=1e-4)",
                "# Test 2: 4-qubit GHZ state |GHZ\u2084\u27e9 = (|0000\u27e9 + |1111\u27e9)/\u221a2",
                "psi = np.zeros(16, dtype=complex)",
                "psi[0] = 1/np.sqrt(2)",
                "psi[15] = 1/np.sqrt(2)",
                "target = 1.0",
                "assert np.isclose(n_tangle(psi), target, rtol=1e-4, atol=1e-4)",
                "# Test 3: 4-qubit W state |W\u2084\u27e9 = (|0001\u27e9 + |0010\u27e9 + |0100\u27e9 + |1000\u27e9)/2",
                "psi = np.zeros(16, dtype=complex)",
                "psi[1] = 1/2",
                "psi[2] = 1/2",
                "psi[4] = 1/2",
                "psi[8] = 1/2",
                "target = 0.0",
                "assert np.isclose(n_tangle(psi), target, rtol=1e-4, atol=1e-4)",
                "# Test 4: Product state |01\u27e9 (no entanglement)",
                "psi = np.kron([0, 1], [0.8, 0.6])",
                "target = 0.0",
                "assert np.isclose(n_tangle(psi), target, rtol=1e-4, atol=1e-4)"
            ],
            "return_line": ""
        }
    ],
    "general_solution": "def sigma_y_tensor_power(n) -> np.ndarray:\n    '''Compute the tensor product of n Pauli Y matrices.\n\n    Input:\n    n: Number of matrices.\n\n    Output:\n    A numpy array representing the tensor product of the input arrays.\n'''\n    sigma_y = np.array([[0,-1j],[1j,0]])\n    product = sigma_y\n    for i in range(n-1):\n    product = np.kron(product, sigma_y)\n    return product\ndef n_tangle(psi):\n    '''Compute the n-tangle of an n-qubit pure state for even n.\n\n    Input:\n    psi: A 1D numpy array of complex numbers representing the state vector |\u03c8\u27e9.\n    The length of the array should be 2^n, where n is an even integer.\n\n    Output:\nA float representing the n-tangle of the state.\n'''\n    n = int(np.log2(len(psi)))\n   product = sigma_y_tensor_power(n)\n    psi_star = product @ np.conj(psi)\n    tangle = (abs(np.inner(psi,psi_star)))**2\n    return tangle",
    "general_tests": [
        "# Test 1: 2-qubit maximally entangled Bell state |\u03a6+\u27e9 = (|00\u27e9 + |11\u27e9)/\u221a2\npsi = np.array([1, 0, 0, 1]) / np.sqrt(2)\nexpected = 1.0\nassert np.isclose(n_tangle(psi), expected, rtol=1e-4, atol=1e-4)",
        "# Test 2: 4-qubit GHZ state |GHZ\u2084\u27e9 = (|0000\u27e9 + |1111\u27e9)/\u221a2\npsi = np.zeros(16, dtype=complex)\npsi[0] = 1/np.sqrt(2)\npsi[15] = 1/np.sqrt(2)\nexpected = 1.0\nassert np.isclose(n_tangle(psi), expected, rtol=1e-4, atol=1e-4)",
        "# Test 3: 4-qubit W state |W\u2084\u27e9 = (|0001\u27e9 + |0010\u27e9 + |0100\u27e9 + |1000\u27e9)/2\npsi = np.zeros(16, dtype=complex)\npsi[1] = 1/2\npsi[2] = 1/2\npsi[4] = 1/2\npsi[8] = 1/2\nexpected = 0.0\nassert np.isclose(n_tangle(psi), expected, rtol=1e-4, atol=1e-4)",
        "# Test 4: Product state |01\u27e9 (no entanglement)\npsi = np.kron([0, 1], [0.8, 0.6])\nexpected = 0.0\nassert np.isclose(n_tangle(psi), expected, rtol=1e-4, atol=1e-4)"
    ]
}