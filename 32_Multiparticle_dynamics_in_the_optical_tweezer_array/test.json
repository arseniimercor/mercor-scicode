{
    "problem_name": "Multiparticle_dynamics_in_the_optical_tweezer_array",
    "problem_id": "32",
    "problem_description_main": "A system of $N$ identical nanospheres is trapped by an optical tweezer array that is arranged equidistantly along the $x$ axis. Each nanosphere is confined to oscillate near its equilibrium position because of the harmonic trapping forces from the linearly polarized optical tweezer array. The adjacent nanospheres interact via optical binding forces resulting from induced dipoles. Simulate the dynamics of phonon occupation using Python functionalities for small oscillations along the $x$-axis near the equilibrium positions of each sphere.",
    "problem_background_main": "In an optical tweezer array, trapped nanospheres experience optical binding forces due to interactions between their induced dipoles and external fields. These forces, combined with damping and vibrational couplings, govern the dynamics of phonon occupation. This problem explores these dynamics by modeling the system as coupled harmonic oscillators.",
    "problem_io": "'''Input: N : int Number of trapped nanospheres. t0 : float Time point to compute phonon occupation. R : float Distance between adjacent nanospheres. l : float Wavelength of optical traps. phi : float Polarization angle of the traps. Gamma : float Damping coefficient of nanospheres. P : list of floats Power of optical traps for each nanosphere. n0 : list of floats Initial phonon occupation numbers. w : float Beam waist of optical traps. a : float Radius of nanospheres. n : float Refractive index of nanospheres. rho : float Density of nanospheres. Output: nf : list of floats Phonon occupation numbers at time t0.'''",
    "required_dependencies": "import numpy as np\nimport scipy\nfrom scipy.constants import epsilon_0, c",
    "sub_steps": [
        {
            "step_number": "32.1",
            "step_name": "Calculate Optical Binding Force",
            "step_description_prompt": "Two linearly polarized optical traps having the same polarization direction are separated by a distance $R$. Implement a Python function to compute the optical binding force between the two identical nanospheres trapped by a linearly polarized optical tweezer array. The function should calculate the induced dipole interactions between the two nanospheres, assuming the Rayleigh approximation.",
            "step_background": "Explanation of the binding force dynamics...",
            "function_header": "def calculate_binding_force(P, phi, R, l, w, a, n):",
            "ground_truth_code": "def calculate_binding_force(P, phi, R, l, w, a, n):\n    pass",
            "test_cases": []
        },
        {
            "step_number": "32.2",
            "step_name": "Generate Hamiltonian",
            "step_description_prompt": "Develop a Python function to compute the Hamiltonian for the provided nanospherical system, taking into account the linearized optical binding force acting upon the trapped nanospheres.",
            "step_background": "Details about Hamiltonian generation...",
            "function_header": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho):",
            "ground_truth_code": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho):\n    pass",
            "test_cases": []
        },
        {
            "step_number": "32.3",
            "step_name": "Runge-Kutta for Phonon Dynamics",
            "step_description_prompt": "Write a Python function to implement the fourth-order Runge-Kutta (RK4) method to simulate phonon occupation dynamics of the trapped nanosphere system with the correlation matrix $C_{ij} = \\left\\langle {b_i^\\dagger {b_j}} \\right\\rangle$ and the master equation in Lindblad form.",
            "step_background": "Explanation about the Runge-Kutta method...",
            "function_header": "def runge_kutta_dynamics(C0, H, L, M, t0, steps):",
            "ground_truth_code": "def runge_kutta_dynamics(C0, H, L, M, t0, steps):\n    pass",
            "test_cases": []
        }
    ]
}








