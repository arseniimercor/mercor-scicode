{
  "problem_name": "Multiparticle_dynamics_in_the_optical_tweezer_array",
  "problem_id": "32",
  "problem_description_main": "A system of $N$ identical nanospheres is trapped by an optical tweezer array that is arranged equidistantly along the $x$ axis. Each nanosphere is confined to oscillate near its equilibrium position because of the harmonic trapping forces from the linearly polarized optical tweezer array. The adjacent nanospheres interact via optical binding forces resulting from induced dipoles. Simulate the dynamics of phonon occupation using Python functionalities for small oscillations along the $x$-axis near the equilibrium positions of each sphere.",
  "problem_background_main": "In an optical tweezer array...",
  "problem_io": "\"\"\"\nArgs:\n    N (int): Number of trapped nanospheres.\n    t0 (float): Time point to compute phonon occupation.\n    R (float): Distance between adjacent nanospheres (meters).\n    l (float): Wavelength of optical tweezers (meters).\n    phi (float): Polarization angle of the tweezers (radians).\n    Gamma (list of float): Damping coefficients for each nanosphere (1/s).\n    P (list of float): Powers of optical tweezers for each nanosphere (Watts).\n    n0 (list of float): Initial phonon occupation numbers for each nanosphere.\n    w (float): Beam waist of the optical tweezers (meters).\n    a (float): Radius of the nanospheres (meters).\n    n (float): Refractive index of the nanospheres.\n    rho (float): Density of the nanospheres (kg/mÂ³).\n\nReturns:\n    list of float: Phonon occupation numbers at time t0 for each nanosphere.\n\"\"\"",
  "required_dependencies": "import numpy as np\nimport scipy\nfrom scipy.constants import epsilon_0, c",
  "sub_steps": [
        {
            "step_number": "32.1",
            "step_name": "Calculate Optical Binding Force",
            "step_description_prompt": "Two linearly polarized optical traps having the same polarization direction are separated by a distance $R$. Implement a Python function to compute the optical binding force between the two identical nanospheres trapped by a linearly polarized optical tweezer array. The function should calculate the induced dipole interactions between the two nanospheres, assuming the Rayleigh approximation.",
            "step_background": "If we suppose the nanospheres are placed on the $x$-axis while each nanosphere is trapped by a linearly polarized laser beam propagating along the $z$-axis, we have the induced dipole moments as $\\mathbf{p}_1 = \\alpha \\mathbf{E}_1$ and $\\mathbf{p}_2 = \\alpha \\mathbf{E}_2$, where $\\alpha = 4\\pi \\varepsilon_0 a^3 \\frac{n^2 - 1}{n^2 + 2}$ is the scalar polarizability of the nanospheres. The trapping electric field $E_i$ is related to the laser power $P_i$ by $E_i = \\sqrt{\\frac{4P_i}{\\pi w^2 \\varepsilon_0 c}}$, where $w$ is the beam waist. The electric field emitted by dipole 2 at the location of dipole 1 can be written as $\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1) = G(\\mathbf{R}) \\mathbf{p}_2$, where $G_{pq}$ is the dyadic Green's function, which is expressed as:\n\n$$G_{pq} = \\frac{\\exp(ikR)}{4\\pi \\varepsilon_0 R^3} \\left[ \\left(3 - 3ikR - k^2R^2\\right) \\frac{R_p R_q}{R^2} + \\left(k^2R^2 + ikR - 1\\right) \\delta_{pq} \\right].$$\n\nThe optical binding force along the $x$-axis is derived as:\n\n$$F_x = \\frac{1}{2} \\operatorname{Re} \\left[ \\mathbf{p}_1 \\cdot \\nabla_x (\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1)) \\right].$$\n\nThe derived radial optical binding force $F_x$ can be expressed as:\n\n$$F_x = F_{xx} + F_{xy},$$\n\nwhere:\n\n$$F_{xx} = \\frac{2 \\alpha^2 E_{x1} E_{x2}}{8\\pi \\varepsilon_0 R^4} \\left[ -3 \\cos(kR) - 3kR \\sin(kR) + (kR)^2 \\cos(kR) \\right],$$\n\nand\n\n$$F_{xy} = \\frac{\\alpha^2 E_{y1} E_{y2}}{8\\pi \\varepsilon_0 R^4} \\left[ 3 \\cos(kR) + 3kR \\sin(kR) - 2(kR)^2 \\cos(kR) - (kR)^3 \\sin(kR) \\right].$$\n\nThe Rayleigh approximation assumes that each nanosphere acts as an induced dipole in the external field. The optical binding force arises from the interaction between the dipole induced in one nanosphere and the electric field generated by the induced dipole of the other nanosphere. This force depends on factors such as polarization, inter-sphere distance $R$, and beam parameters.",
            "function_header": "def calculate_binding_force(P, phi, R, l, w, a, n):",
            "ground_truth_code": "def calculate_binding_force(P, phi, R, l, w, a, n):\n    '''\n    Function to calculate the optical binding force between two trapped nanospheres.\n    '''\n    import numpy as np\n    from scipy.constants import epsilon_0, c\n\n    # Wave number\n    k = 2 * np.pi / l\n    # Scalar polarizability\n    alpha = (4 * np.pi * epsilon_0 * a**3 * (n**2 - 1)) / (n**2 + 2)\n    # Electric fields\n    E1 = np.sqrt(4 * P[0] / (np.pi * w**2 * epsilon_0 * c))\n    E2 = np.sqrt(4 * P[1] / (np.pi * w**2 * epsilon_0 * c))\n    # Forces\n    Fxx = (\n        2 * alpha**2 * E1 * E2 * np.cos(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (-3 * np.cos(k * R) - 3 * k * R * np.sin(k * R) + (k * R)**2 * np.cos(k * R))\n    )\n    Fxy = (\n        alpha**2 * E1 * E2 * np.sin(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (3 * np.cos(k * R) + 3 * k * R * np.sin(k * R) - 2 * (k * R)**2 * np.cos(k * R) - (k * R)**3 * np.sin(k * R))\n    )\n    return Fxx + Fxy",
            "test_cases": [
    "# Test 1: Typical parameters\nP = [10e6, 100e6]\nphi = 1.5708\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -2.17651746535146e-06  # Target optical binding force\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 2: Identical powers and zero polarization\nP = [10e6, 10e6]\nphi = 0\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = 3.102222e-07  # Example target\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 3: Edge case with large beam waist\nP = [1e9, 1e9]\nphi = 0.7854\nR = 1.55e-6\nl = 1.55e-6\nw = 1e-6  # Large beam waist\na = 100e-9\nn = 1.444\ntarget = -1.123456e-06  # Adjust target value\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 4: Attraction vs. repulsion transition\nP = [1e6, 1e6]\nphi = 0\nR = 2e-6  # Large distance\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -5.1e-8  # Expected force in repulsive regime\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 5: Scaling with power ratios\nP = [10e6, 50e6]  # Unequal powers\nphi = 0\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -1.32e-6  # Adjust target value based on power ratio\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 6: Polarization effects (orthogonal)\nP = [10e6, 10e6]\nphi = np.pi / 2  # Orthogonal polarization\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = 2.5e-7  # Adjust target value for orthogonal polarization\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",

    "# Test 7: Polarization effects (varying angles)\nP = [10e6, 10e6]\nphi = np.pi / 4  # 45-degree polarization\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = 1.8e-7  # Adjust target value for 45-degree polarization\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)"
], 
            "return_line": ""
        },
{
    "step_number": "32.2",
    "step_name": "Generate Hamiltonian",
    "step_description_prompt": "Develop a Python function to compute the Hamiltonian for the provided nanospherical system, considering the damping coefficient array and the linearized optical binding force acting upon the trapped nanospheres.",
    "step_background": "Around the equilibrium position, we can expand the optical binding force as:\n\n$$\\Delta {F_{ij}} = {\\left. {\\Delta R\\frac{{d{F_x}}}{{dR}}} \\right|_{x = \\left| {i - j} \\right|d}} \\equiv {k_{ij}}\\Delta R,$$\n\nthen the linearized dynamics along the tweezer array for the $i$th nanosphere can be written as:\n\n$$m{\\ddot x_i} + \\Gamma_i \\dot{x_i} + k_i{x_i} + \\sum\\limits_{j \\ne i} {{k_{ij}}({x_i} - {x_j})}  = 0.$$ \n\nThe corresponding Hamiltonian reads:\n\n$$H = \\sum\\limits_i {\\left( {\\frac{{p_i^2}}{{2m}} + \\frac{1}{2}{k_i}x_i^2} \\right)}  + \\sum\\limits_{i \\ne j} {\\frac{1}{2}{k_{ij}}{{({x_i} - {x_j})}^2}},$$\n\nand can be quantized as:\n\n$$H=\\sum_i \\hbar \\Omega_i b_i^{\\dagger} b_i+\\hbar \\sum_{i \\neq j} g_{i j}\\left(b_i^{\\dagger} b_j+b_i b_j^{\\dagger}\\right),$$\n\nwhere the resonant frequency is:\n\n$$\\Omega_i=\\sqrt{\\left(k_i+\\sum_{j \\neq i} k_{i j}\\right) / m},$$\n\nand the coupling constant is:\n\n$$g_{i j}=-\\frac{k_{i j}}{2 m \\sqrt{\\Omega_i \\Omega_j}}.$$ \n\nThis Hamiltonian can be expressed in matrix form as $H_{ii}= \\Omega_i$ and $H_{ij} = g_{i j}$. The Hamiltonian represents the coupled oscillatory system, incorporating resonant frequencies, coupling constants, and the damping coefficients between nanospheres. These parameters are derived from linearized binding forces.",
    "function_header": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma):",
    "ground_truth_code": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma):\n    \"\"\"\n    Generate the Hamiltonian matrix for the nanospherical system, including damping.\n\n    Args:\n        P (list): Laser powers for each nanosphere (W).\n        phi (float): Polarization angle (rad).\n        R (float): Distance between adjacent nanospheres (m).\n        l (float): Wavelength of the laser (m).\n        w (float): Beam waist (m).\n        a (float): Radius of the nanospheres (m).\n        n (float): Refractive index of nanospheres.\n        N (int): Number of nanospheres.\n        rho (float): Density of the nanospheres (kg/mÂ³).\n        Gamma (list): Damping coefficients for each nanosphere.\n\n    Returns:\n        numpy.ndarray: Hamiltonian matrix.\n    \"\"\"\n    import numpy as np\n\n    # Mass of a single nanosphere\n    m = (4 / 3) * np.pi * a**3 * rho\n\n    # Initialize Hamiltonian matrix\n    H = np.zeros((N, N), dtype=np.float64)\n\n    # Compute diagonal (resonant frequencies) and off-diagonal (coupling constants)\n    for i in range(N):\n        # Compute diagonal element (Omega_i)\n        k_i = calculate_binding_force([P[i], P[i]], phi, R, l, w, a, n)\n        Omega_i = np.sqrt(max((k_i + Gamma[i]) / m, 0))  # Ensure non-negative sqrt\n        H[i, i] = Omega_i\n\n        # Compute off-diagonal elements (coupling constants)\n        if i > 0:\n            k_ij = calculate_binding_force([P[i - 1], P[i]], phi, R, l, w, a, n)\n            Omega_j = H[i - 1, i - 1]\n            if Omega_i > 0 and Omega_j > 0:\n                g_ij = -k_ij / (2 * m * np.sqrt(Omega_i * Omega_j))\n                H[i, i - 1] = g_ij\n                H[i - 1, i] = g_ij\n\n    return H",
    "test_cases": [
        "# Test 1: Two nanospheres\nP = [100e-3, 100e-3]\nphi = np.pi / 2\nR = 2 * 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 2\nrho = 2.648e3\nGamma = [1e-5, 1e-5]\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)\nassert H.shape == (2, 2)",
        "# Test 2: Five nanospheres with uniform parameters\nP = [100e-3] * 5\nphi = 0\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 5\nrho = 2.648e3\nGamma = [1e-5] * 5\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)\nassert H.shape == (5, 5)",
        "# Test 3: Three nanospheres with different powers\nP = [100e-3, 200e-3, 300e-3]\nphi = np.pi / 3\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 3\nrho = 2.648e3\nGamma = [1e-5, 2e-5, 3e-5]\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)\nassert H.shape == (3, 3)",
        "# Test 4: Ten nanospheres with uniform parameters\nP = [100e-3] * 10\nphi = np.pi / 4\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 10\nrho = 2.648e3\nGamma = [1e-5] * 10\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)\nassert H.shape == (10, 10)"
    ],
    "return_line": ""
},
          {
            "step_number": "32.3",
            "step_name": "Runge-Kutta for Phonon Dynamics",
            "step_description_prompt": "Write a Python function to implement the fourth-order Runge-Kutta (RK4) method to simulate phonon occupation dynamics of the trapped nanosphere system with the correlation matrix $C_{ij} = \\langle b_i^\\dagger b_j \\rangle$ and the master equation in Lindblad form.",
            "step_background": "The Lindblad master equation governs the evolution of the correlation matrix $C_{ij} = \\langle b_i^\\dagger b_j \\rangle$, describing the dynamics of an open quantum system. The equation is given as:\n\n$$\\dot{C} = i[H, C] + \\{L, C\\} + M,$$\n\nwhere:\n\n- $H$ is the system Hamiltonian, which determines coherent dynamics,\n- $L = -\\frac{1}{2} \\operatorname{Diag}(\\Gamma_1, \\Gamma_2, \\ldots, \\Gamma_N)$ is the dissipation matrix describing loss rates, and\n- $M = \\operatorname{Diag}(\\Gamma_1 n_1^{\\text{th}}, \\Gamma_2 n_2^{\\text{th}}, \\ldots, \\Gamma_N n_N^{\\text{th}})$ is the reservoir matrix describing thermal effects.\n\nThe standard Fourth-Order Runge-Kutta (RK4) method is used to numerically solve this equation. At each time step $n$, the next state $C_{n+1}$ is computed as:\n\n$$C_{n+1} = C_n + \\frac{\\Delta t}{6}(k_1 + 2k_2 + 2k_3 + k_4),$$\n\nwhere:\n\n$$k_1 = i[H, C_n] + \\{L, C_n\\} + M,$$\n$$k_2 = i[H, C_n + \\frac{1}{2}k_1 \\Delta t] + \\{L, C_n + \\frac{1}{2}k_1 \\Delta t\\} + M,$$\n$$k_3 = i[H, C_n + \\frac{1}{2}k_2 \\Delta t] + \\{L, C_n + \\frac{1}{2}k_2 \\Delta t\\} + M,$$\n$$k_4 = i[H, C_n + k_3 \\Delta t] + \\{L, C_n + k_3 \\Delta t\\} + M.$$\n\nThe RK4 method provides a robust way to integrate the Lindblad equation, ensuring stability and accuracy in capturing the system's evolution under dissipation and external fields.",
            "function_header": "def runge_kutta_dynamics(C0, H, L, M, t0, steps):",
            "ground_truth_code": "def runge_kutta_dynamics(C0, H, L, M, t0, steps):\n    import numpy as np\n\n    delta_t = t0 / steps\n    C = np.array(C0, dtype=np.complex128)\n\n    def commutator(A, B):\n        return np.dot(A, B) - np.dot(B, A)\n\n    def anticommutator(A, B):\n        return np.dot(A, B) + np.dot(B, A)\n\n    for _ in range(steps):\n        k1 = 1j * commutator(H, C) + anticommutator(L, C) + M\n        k2 = 1j * commutator(H, C + 0.5 * k1 * delta_t) + anticommutator(L, C + 0.5 * k1 * delta_t) + M\n        k3 = 1j * commutator(H, C + 0.5 * k2 * delta_t) + anticommutator(L, C + 0.5 * k2 * delta_t) + M\n        k4 = 1j * commutator(H, C + k3 * delta_t) + anticommutator(L, C + k3 * delta_t) + M\n        C += (delta_t / 6) * (k1 + 2 * k2 + 2 * k3 + k4)\n\n    return np.diag(C).real",
            "test_cases": [
                        "{\n  \"test_case_number\": 1,\n  \"C0\": \"np.diag([6762435.17442855, 270122.3810029, 10004196.45838998, 19073172.61665625, 3440024.54245118])\",\n  \"H\": \"np.identity(5) * 1e-5\",\n  \"L\": \"-np.identity(5) * 1e-5\",\n  \"M\": \"np.identity(5) * 1e-5\",\n  \"t0\": 0.02,\n  \"steps\": 100,\n  \"target\": \"[6762435.17, 270122.38, 10004196.46, 19073172.62, 3440024.54]\"\n}",
                        "{\n  \"test_case_number\": 2,\n  \"C0\": \"np.diag([34044055.73846075, 36753347.53463306, 38766694.48731664, 36664745.76086929, 11963256.63062548])\",\n  \"H\": \"np.identity(5) * 1e-5\",\n  \"L\": \"-np.identity(5) * 1e-5\",\n  \"M\": \"np.identity(5) * 1e-5\",\n  \"t0\": 0.05,\n  \"steps\": 1000,\n  \"target\": \"[34044055.74, 36753347.53, 38766694.49, 36664745.76, 11963256.63]\"\n}",
                        "{\n  \"test_case_number\": 3,\n  \"C0\": \"np.diag([5504117.23331725, 2794825.43714492, 781478.48446118, 2883427.21090874, 27584916.3411524])\",\n  \"H\": \"np.identity(5) * 1e-5\",\n  \"L\": \"-np.identity(5) * 1e-5\",\n  \"M\": \"np.identity(5) * 1e-5\",\n  \"t0\": 0.02,\n  \"steps\": 1000,\n  \"target\": \"[5504117.23, 2794825.44, 781478.48, 2883427.21, 27584916.34]\"\n}"
            ],
              "return_line": ""
        }
    ],
    "general_solution": "def solve_multiparticle_dynamics(N, t0, R, l, phi, Gamma, P, n0, w, a, n, rho):\n    \"\"\"\n    Simulates phonon occupation dynamics in an optical tweezer array.\n    \n    Args:\n        N (int): Number of nanospheres.\n        t0 (float): Time for simulation (seconds).\n        R (float): Distance between adjacent nanospheres (meters).\n        l (float): Wavelength of optical tweezers (meters).\n        phi (float): Polarization angle (radians).\n        Gamma (list): Damping coefficients for each nanosphere.\n        P (list): Powers of optical tweezers (Watts).\n        n0 (list): Initial phonon occupation numbers.\n        w (float): Beam waist of optical tweezers (meters).\n        a (float): Radius of nanospheres (meters).\n        n (float): Refractive index of the nanospheres.\n        rho (float): Density of nanospheres (kg/mÂ³).\n    \n    Returns:\n        list: Phonon occupation numbers at time t0.\n    \"\"\"\n    import numpy as np\n    \n    # Helper function to calculate optical binding forces\n    def calculate_binding_force(P, phi, R, l, w, a, n):\n        k = 2 * np.pi / l\n        alpha = (4 * np.pi * epsilon_0 * a**3 * (n**2 - 1)) / (n**2 + 2)\n        E1 = np.sqrt(4 * P[0] / (np.pi * w**2 * epsilon_0 * c))\n        E2 = np.sqrt(4 * P[1] / (np.pi * w**2 * epsilon_0 * c))\n        Fxx = (2 * alpha**2 * E1 * E2 * np.cos(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n               * (-3 * np.cos(k * R) - 3 * k * R * np.sin(k * R) + (k * R)**2 * np.cos(k * R)))\n        Fxy = (alpha**2 * E1 * E2 * np.sin(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n               * (3 * np.cos(k * R) + 3 * k * R * np.sin(k * R) - 2 * (k * R)**2 * np.cos(k * R) - (k * R)**3 * np.sin(k * R)))\n        return Fxx + Fxy\n    \n    # Helper function to generate the Hamiltonian\n    def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma):\n        m = (4 / 3) * np.pi * a**3 * rho\n        H = np.zeros((N, N), dtype=np.float64)\n        for i in range(N):\n            k_i = calculate_binding_force([P[i], P[i]], phi, R, l, w, a, n)\n            Omega_i = np.sqrt(max((k_i + Gamma[i]) / m, 0))\n            H[i, i] = Omega_i\n            if i > 0:\n                k_ij = calculate_binding_force([P[i - 1], P[i]], phi, R, l, w, a, n)\n                Omega_j = H[i - 1, i - 1]\n                if Omega_i > 0 and Omega_j > 0:\n                    g_ij = -k_ij / (2 * m * np.sqrt(Omega_i * Omega_j))\n                    H[i, i - 1] = g_ij\n                    H[i - 1, i] = g_ij\n        return H\n\n    # Helper function for Runge-Kutta dynamics\n    def runge_kutta_dynamics(C0, H, L, M, t0, steps):\n        delta_t = t0 / steps\n        C = np.array(C0, dtype=np.complex128)\n\n        def commutator(A, B):\n            return np.dot(A, B) - np.dot(B, A)\n\n        def anticommutator(A, B):\n            return np.dot(A, B) + np.dot(B, A)\n\n        for _ in range(steps):\n            k1 = 1j * commutator(H, C) + anticommutator(L, C) + M\n            k2 = 1j * commutator(H, C + 0.5 * k1 * delta_t) + anticommutator(L, C + 0.5 * k1 * delta_t) + M\n            k3 = 1j * commutator(H, C + 0.5 * k2 * delta_t) + anticommutator(L, C + 0.5 * k2 * delta_t) + M\n            k4 = 1j * commutator(H, C + k3 * delta_t) + anticommutator(L, C + k3 * delta_t) + M\n            C += (delta_t / 6) * (k1 + 2 * k2 + 2 * k3 + k4)\n\n        return np.diag(C).real\n\n    H = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)\n    C0 = np.diag(n0)\n    L = -np.diag(Gamma)\n    M = np.diag(Gamma * np.array(n0))\n    nf = runge_kutta_dynamics(C0, H, L, M, t0, 1000)\n    return nf.tolist()",
    "general_tests": [
        "# Test 1: Two nanospheres with uniform parameters\nN = 2\nt0 = 0.02\nR = 1.55e-6\nl = 1.55e-6\nphi = np.pi / 2\nGamma = [1e-5, 1e-5]\nP = [100e-3, 100e-3]\nn0 = [1, 1]\nw = 600e-9\na = 100e-9\nn = 1.444\nrho = 2.648e3\ntarget = [1.0001, 1.0001]  # Example target\nassert np.allclose(solve_multiparticle_dynamics(N, t0, R, l, phi, Gamma, P, n0, w, a, n, rho), target, rtol=1e-4, atol=1e-6)",
        "# Test 2: Five nanospheres with damping\nN = 5\nt0 = 0.05\nR = 1.55e-6\nl = 1.55e-6\nphi = 0\nGamma = [1e-5] * 5\nP = [100e-3] * 5\nn0 = [1, 2, 3, 4, 5]\nw = 600e-9\na = 100e-9\nn = 1.444\nrho = 2.648e3\ntarget = [1.0001, 2.0001, 3.0001, 4.0001, 5.0001]  # Example target\nassert np.allclose(solve_multiparticle_dynamics(N, t0, R, l, phi, Gamma, P, n0, w, a, n, rho), target, rtol=1e-4, atol=1e-6)",
        "# Test 3: Three nanospheres with varying power and damping\nN = 3\nt0 = 0.03\nR = 1.55e-6\nl = 1.55e-6\nphi = np.pi / 4\nGamma = [1e-5, 2e-5, 3e-5]\nP = [100e-3, 200e-3, 300e-3]\nn0 = [1, 0.5, 1.5]\nw = 600e-9\na = 100e-9\nn = 1.444\nrho = 2.648e3\nprint(f\"Intermediate Results (Test 3):\n\")\nprint(f\"Binding Force for each pair: {calculate_binding_force(P, phi, R, l, w, a, n)}\")\nprint(f\"Hamiltonian:\n{generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)}\")\ntarget = [1.00015, 0.5002, 1.50025]\nassert np.allclose(solve_multiparticle_dynamics(N, t0, R, l, phi, Gamma, P, n0, w, a, n, rho), target, rtol=1e-4, atol=1e-6)",
        "# Test 4: Ten nanospheres with uniform parameters\nN = 10\nt0 = 0.1\nR = 1.55e-6\nl = 1.55e-6\nphi = np.pi / 6\nGamma = [1e-5] * 10\nP = [50e-3] * 10\nn0 = list(range(1, 11))\nw = 700e-9\na = 120e-9\nn = 1.5\nrho = 2.5e3\nprint(f\"Intermediate Results (Test 4):\n\")\nprint(f\"Binding Force for each pair: {calculate_binding_force(P, phi, R, l, w, a, n)}\")\nprint(f\"Hamiltonian:\n{generate_hamiltonian(P, phi, R, l, w, a, n, N, rho, Gamma)}\")\ntarget = [1.0005, 2.0005, 3.0005, 4.0005, 5.0005, 6.0005, 7.0005, 8.0005, 9.0005, 10.0005]\nassert np.allclose(solve_multiparticle_dynamics(N, t0, R, l, phi, Gamma, P, n0, w, a, n, rho), target, rtol=1e-4, atol=1e-6)"
   ]
}





