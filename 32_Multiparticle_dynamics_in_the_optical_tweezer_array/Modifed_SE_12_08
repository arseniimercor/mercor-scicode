{
    "problem_name": "Multiparticle_dynamics_in_the_optical_tweezer_array",
    "problem_id": "32",
    "problem_description_main": "A system of $N$ identical nanospheres is trapped by an optical tweezer array that is arranged equidistantly along the $x$ axis. Each nanosphere is confined to oscillate near its equilibrium position because of the harmonic trapping forces from the linearly polarized optical tweezer array. The adjacent nanospheres interact via optical binding forces resulting from induced dipoles. Simulate the dynamics of phonon occupation using Python functionalities for small oscillations along the $x$-axis near the equilibrium positions of each sphere.",
    "problem_background_main": "In an optical tweezer array, trapped nanospheres experience optical binding forces due to interactions between their induced dipoles and external fields. These forces, combined with damping and vibrational couplings, govern the dynamics of phonon occupation. This problem explores these dynamics by modeling the system as coupled harmonic oscillators.",
    "problem_io": "'''\nInput:\nN : int\n    Number of trapped nanospheres.\nt0 : float\n    Time point to compute phonon occupation.\nR : float\n    Distance between adjacent nanospheres.\nl : float\n    Wavelength of optical traps.\nphi : float\n    Polarization angle of the traps.\nGamma : float\n    Damping coefficient of nanospheres.\nP : list of floats\n    Power of optical traps for each nanosphere.\nn0 : list of floats\n    Initial phonon occupation numbers.\nw : float\n    Beam waist of optical traps.\na : float\n    Radius of nanospheres.\nn : float\n    Refractive index of nanospheres.\nrho : float\n    Density of nanospheres.\n\nOutput:\nnf : list of floats\n    Phonon occupation numbers at time t0.\n'''",
    "required_dependencies": "import numpy as np\nimport scipy\nfrom scipy.constants import epsilon_0, c",
    "sub_steps": [
        {
            "step_number": "32.1",
            "step_name": "Calculate Optical Binding Force",
            "step_description_prompt": "Two linearly polarized optical traps having the same polarization direction are separated by a distance $R$. Implement a Python function to compute the optical binding force between the two identical nanospheres trapped by a linearly polarized optical tweezer array. The function should calculate the induced dipole interactions between the two nanospheres, assuming the Rayleigh approximation.",
            "step_background": "If we suppose the nanospheres are placed on the $x$-axis while each nanosphere is trapped by a linearly polarized laser beam propagating along the $z$-axis, we have the induced dipole moments as $\\mathbf{p}_1 = \\alpha \\mathbf{E}_1$ and $\\mathbf{p}_2 = \\alpha \\mathbf{E}_2$, where $\\alpha = 4\\pi \\varepsilon_0 a^3 \\frac{n^2 - 1}{n^2 + 2}$ is the scalar polarizability of the nanospheres. The trapping electric field $E_i$ is related to the laser power $P_i$ by $E_i = \\sqrt{\\frac{4P_i}{\\pi w^2 \\varepsilon_0 c}}$, where $w$ is the beam waist. The electric field emitted by dipole 2 at the location of dipole 1 can be written as $\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1) = G(\\mathbf{R}) \\mathbf{p}_2$, where $G_{pq}$ is the dyadic Green's function, which is expressed as:\n\n$$G_{pq} = \\frac{\\exp(ikR)}{4\\pi \\varepsilon_0 R^3} \\left[ \\left(3 - 3ikR - k^2R^2\\right) \\frac{R_p R_q}{R^2} + \\left(k^2R^2 + ikR - 1\\right) \\delta_{pq} \\right].$$\n\nThe optical binding force along the $x$-axis is derived as:\n\n$$F_x = \\frac{1}{2} \\operatorname{Re} \\left[ \\mathbf{p}_1 \\cdot \\nabla_x (\\mathbf{E}_{\\mathrm{ind},2}(\\mathbf{r}_1)) \\right].$$\n\nThe derived radial optical binding force $F_x$ can be expressed as:\n\n$$F_x = F_{xx} + F_{xy},$$\n\nwhere:\n\n$$F_{xx} = \\frac{2 \\alpha^2 E_{x1} E_{x2}}{8\\pi \\varepsilon_0 R^4} \\left[ -3 \\cos(kR) - 3kR \\sin(kR) + (kR)^2 \\cos(kR) \\right],$$\n\nand\n\n$$F_{xy} = \\frac{\\alpha^2 E_{y1} E_{y2}}{8\\pi \\varepsilon_0 R^4} \\left[ 3 \\cos(kR) + 3kR \\sin(kR) - 2(kR)^2 \\cos(kR) - (kR)^3 \\sin(kR) \\right].$$\n\nThe Rayleigh approximation assumes that each nanosphere acts as an induced dipole in the external field. The optical binding force arises from the interaction between the dipole induced in one nanosphere and the electric field generated by the induced dipole of the other nanosphere. This force depends on factors such as polarization, inter-sphere distance $R$, and beam parameters.",
            "function_header": "def calculate_binding_force(P, phi, R, l, w, a, n):",
            "ground_truth_code": "def calculate_binding_force(P, phi, R, l, w, a, n):\n    '''\n    Function to calculate the optical binding force between two trapped nanospheres.\n    '''\n    import numpy as np\n    from scipy.constants import epsilon_0, c\n\n    # Wave number\n    k = 2 * np.pi / l\n    # Scalar polarizability\n    alpha = (4 * np.pi * epsilon_0 * a**3 * (n**2 - 1)) / (n**2 + 2)\n    # Electric fields\n    E1 = np.sqrt(4 * P[0] / (np.pi * w**2 * epsilon_0 * c))\n    E2 = np.sqrt(4 * P[1] / (np.pi * w**2 * epsilon_0 * c))\n    # Forces\n    Fxx = (\n        2 * alpha**2 * E1 * E2 * np.cos(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (-3 * np.cos(k * R) - 3 * k * R * np.sin(k * R) + (k * R)**2 * np.cos(k * R))\n    )\n    Fxy = (\n        alpha**2 * E1 * E2 * np.sin(phi)**2 / (8 * np.pi * epsilon_0 * R**4)\n        * (3 * np.cos(k * R) + 3 * k * R * np.sin(k * R) - 2 * (k * R)**2 * np.cos(k * R) - (k * R)**3 * np.sin(k * R))\n    )\n    return Fxx + Fxy",
            "test_cases": [
                "# Test 1: Typical parameters\nP = [10e6, 100e6]\nphi = 1.5708\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = -2.17651746535146e-06  # Target optical binding force\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",
                "# Test 2: Identical powers and zero polarization\nP = [10e6, 10e6]\nphi = 0\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\ntarget = 3.102222e-07  # Example target\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)",
                "# Test 3: Edge case with large beam waist\nP = [1e9, 1e9]\nphi = 0.7854\nR = 1.55e-6\nl = 1.55e-6\nw = 1e-6  # Large beam waist\na = 100e-9\nn = 1.444\ntarget = -1.123456e-06  # Adjust target value\nassert np.isclose(calculate_binding_force(P, phi, R, l, w, a, n), target, rtol=1e-4, atol=1e-6)"
            ]
        },
        {
            "step_number": "32.2",
            "step_name": "Generate Hamiltonian",
            "step_description_prompt": "Develop a Python function to compute the Hamiltonian for the provided nanospherical system, taking into account the linearized optical binding force acting upon the trapped nanospheres.",
            "step_background": "step_background": "Around the equilibrium position, we can expand the optical binding force as:\n\n$$\\Delta {F_{ij}} = {\\left. {\\Delta R\\frac{{d{F_x}}}{{dR}}} \\right|_{x = \\left| {i - j} \\right|d}} \\equiv {k_{ij}}\\Delta R,$$\n\nthen the linearized dynamics along the tweezer array for the $i$th nanosphere can be written as:\n\n$$m{\\ddot x_i} + k_i{x_i} + \\sum\\limits_{j \\ne i} {{k_{ij}}({x_i} - {x_j})}  = 0.$$ \n\nThe corresponding Hamiltonian reads:\n\n$$H = \\sum\\limits_i {\\left( {\\frac{{p_i^2}}{{2m}} + \\frac{1}{2}{k_i}x_i^2} \\right)}  + \\sum\\limits_{i \\ne j} {\\frac{1}{2}{k_{ij}}{{({x_i} - {x_j})}^2}},$$\n\nand can be quantized as:\n\n$$H=\\sum_i \\hbar \\Omega_i b_i^{\\dagger} b_i+\\hbar \\sum_{i \\neq j} g_{i j}\\left(b_i^{\\dagger} b_j+b_i b_j^{\\dagger}\\right),$$\n\nwhere the resonant frequency is:\n\n$$\\Omega_i=\\sqrt{\\left(k_i+\\sum_{j \\neq i} k_{i j}\\right) / m},$$\n\nand the coupling constant is:\n\n$$g_{i j}=-\\frac{k_{i j}}{2 m \\sqrt{\\Omega_i \\Omega_j}}.$$ \n\nThis Hamiltonian can be expressed in matrix form as $H_{ii}= \\Omega_i$ and $H_{ij} = g_{i j}$. The Hamiltonian represents the coupled oscillatory system, incorporating resonant frequencies and coupling constants between nanospheres. These parameters are derived from linearized binding forces.",
            "function_header": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho):",
            "ground_truth_code": "def generate_hamiltonian(P, phi, R, l, w, a, n, N, rho):\n    '''Generate the Hamiltonian matrix for the nanospherical system.'''\n    import numpy as np\n    m = (4 / 3) * np.pi * a**3 * rho\n    H = np.zeros((N, N))\n    for i in range(N):\n        H[i, i] = np.sqrt(calculate_binding_force([P[i], P[i]], phi, R, l, w, a, n) / m)\n        if i > 0:\n            coupling = calculate_binding_force([P[i - 1], P[i]], phi, R, l, w, a, n)\n            H[i, i - 1] = H[i - 1, i] = -coupling / (2 * m * np.sqrt(H[i, i] * H[i - 1, i - 1]))\n    return H",
            "test_cases": [
                "# Test 1: Two nanospheres\nP = [100e-3, 100e-3]\nphi = np.pi/2\nR = 2 * 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 2\nrho = 2.648e3\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho)\nassert H.shape == (2, 2)",
                "# Test 2: Five nanospheres with uniform parameters\nP = [100e-3] * 5\nphi = 0\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 5\nrho = 2.648e3\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho)\nassert H.shape == (5, 5)\nassert np.allclose(H[1, 2], H[2, 1], rtol=1e-4, atol=1e-6)  # Symmetry check\nassert np.isclose(H[0, 0], H[4, 4], rtol=1e-4, atol=1e-6)  # Consistent diagonal values",
                "# Test 3: Coupling strength variation with different powers\nP = [100e-3, 200e-3, 300e-3]\nphi = np.pi/3\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 3\nrho = 2.648e3\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho)\nassert H.shape == (3, 3)\nassert not np.isclose(H[0, 1], H[1, 2], rtol=1e-4, atol=1e-6)  # Varying off-diagonal coupling",
                "# Test 4: Larger number of nanospheres\nP = [100e-3] * 10\nphi = np.pi/4\nR = 1.55e-6\nl = 1.55e-6\nw = 600e-9\na = 100e-9\nn = 1.444\nN = 10\nrho = 2.648e3\nH = generate_hamiltonian(P, phi, R, l, w, a, n, N, rho)\nassert H.shape == (10, 10)\nassert np.allclose(np.diag(H)[0:5], np.diag(H)[5:], rtol=1e-4, atol=1e-6)  # Uniform diagonal for identical inputs"
            ]
        }
    ]
}


